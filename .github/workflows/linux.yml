name: linux

on:
  workflow_dispatch:
    inputs:
      c_compiler:
        description: 'C Compiler (e.g. clang, gcc)'
        required: false
        default: 'clang'
      cpp_compiler:
        description: 'C++ Compiler (e.g. clang++, g++)'
        required: false
        default: 'clang++'
      preset:
        description: 'Build preset (e.g., nco-tiberian-dawn)'
        required: false
        default: 'nco-tiberian-dawn'
      os:
        description: 'OS to run on (e.g., ubuntu-24.04)'
        required: false
        default: 'ubuntu-24.04'

  pull_request:
    paths: &change-paths
      - .clang-format
      - CMake**
      - .github/workflows/linux.yml
      - cmake/**
      - common/**
      - redalert/**
      - resources
      - tests/**
      - tiberiandawn/**
      - tools/**

  push:
    branches:
      - main
    paths: *change-paths

concurrency:
  group: ${{ github.ref }}__linux
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  create_dev_release:
    if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
    runs-on: "${{ github.event.inputs.os || 'ubuntu-24.04' }}"
    steps:
    - name: Create Development release
      uses: "0xDylan/action-auto-releases-n20@v1.1"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Development Build"

  vanilla-linux:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        compiler:
          - cc: "${{ github.event.inputs.c_compiler || 'clang' }}"
            cxx: "${{ github.event.inputs.cpp_compiler || 'clang++' }}"
        os:
          - "${{ github.event.inputs.os || 'ubuntu-24.04' }}"

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'
        fetch-depth: 0
        ref: "${{ github.event.pull_request.head.sha || github.sha }}"

    - name: Set Git Info
      id: gitinfo
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Install dependencies
      run: |
        sudo apt-get update -y -qq > /dev/null
        sudo apt-get install -qq -y libsdl2-dev libopenal-dev > /dev/null

    - name: Scan for Preset Files in Changes
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          ci:
            - .github/workflows/linux.yml
          nco:
            - .clang-format
            - CMake**
            - cmake/**
            - common/**
            - resources
            - tools/**
          ra:
            - redalert/**
          td:
            - tiberiandawn/**

    - name: Set Preset
      id: set_preset
      run: |
        PRESET=""

        if [ "${{ steps.changes.outputs.nco }}" = "true" ]; then
          echo "Changes to shared files detected - building everything using cmake preset: nco"
          PRESET="nco"
        elif [ "${{ steps.changes.outputs.ra }}" = "true" ] && [ "${{ steps.changes.outputs.td }}" = "true" ]; then
          echo "Red Alert & Tiberian Dawn changes detected - building both using cmake preset: nco"
          PRESET="nco"
        elif [ "${{ steps.changes.outputs.ra }}" = "true" ] ; then
          echo "Only Red Alert changes detected - using cmake preset: nco-red-alert"
          PRESET="nco-red-alert"
        elif [ "${{ steps.changes.outputs.td }}" = "true" ]; then
          echo "Only Tiberian Dawn changes detected - using cmake preset: nco-tiberian-dawn"
          PRESET="nco-tiberian-dawn"
        elif [ "${{ steps.changes.outputs.ci }}" = "true" ]; then
          echo "Workflow yml changes detected - testing workflow changes using cmake preset: nco"
          PRESET="nco"
        else
          echo "WARNING: Unable to match changed files to a preset - defaulting to building everything using cmake preset: nco"
          PRESET="nco"
        fi

        echo "preset=${PRESET}" >> $GITHUB_OUTPUT

    - name: Init vcpkg
      run: ./scripts/bin/vcpkg --init

    - name: Build Vanilla Conquer
      env:
        CC: ${{ matrix.compiler.cc }}
        CXX: ${{ matrix.compiler.cxx }}
        VC_CXX_FLAGS: "-w;-Wwrite-strings;-Werror=write-strings"
      run: |
        cmake --workflow --preset ${{ steps.set_preset.outputs.preset }}

    # TODO: re-enable after making formatting changes suggested (changes alot of files)
    # - name: Check formatting
    #   if: ${{ matrix.compiler.cc == 'clang' }}
    #   run: |
    #     cmake --build build/${{ steps.set_preset.outputs.preset }} --target format
    #     git diff --exit-code

    - name: Create archives
      run: |
        if [ "${{ steps.set_preset.outputs.preset }}" != "nco-tiberian-dawn" ]; then
          cp ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara.dbg
          strip --strip-all ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara
          objcopy --add-gnu-debuglink=./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara.dbg ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara
        fi

        if [ "${{ steps.set_preset.outputs.preset }}" != "nco-red-alert" ]; then
          cp ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd.dbg
          strip --strip-all ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd
          objcopy --add-gnu-debuglink=./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd.dbg ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd
        fi

        mkdir artifact

        if [ "${{ steps.set_preset.outputs.preset }}" != "nco-tiberian-dawn" ]; then
          7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-linux-${{ matrix.compiler.cc }}-${{ matrix.os }}-x86_64-${{ steps.gitinfo.outputs.sha_short }}.zip ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara
          7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-linux-${{ matrix.compiler.cc }}-${{ matrix.os }}-x86_64-${{ steps.gitinfo.outputs.sha_short }}-debug.zip ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara.dbg
        fi

        if [ "${{ steps.set_preset.outputs.preset }}" != "nco-red-alert" ]; then
          7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-linux-${{ matrix.compiler.cc }}-${{ matrix.os }}-x86_64-${{ steps.gitinfo.outputs.sha_short }}.zip ./resources/data/td/* ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd
          7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-linux-${{ matrix.compiler.cc }}-${{ matrix.os }}-x86_64-${{ steps.gitinfo.outputs.sha_short }}-debug.zip ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd.dbg
        fi

    - name: Add internal tools to archive
      run: |
        cp ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix.dbg
        objcopy --add-gnu-debuglink=./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix.dbg ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix
        strip --strip-all ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix

        7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-linux-${{ matrix.compiler.cc }}-${{ matrix.os }}-x86_64-${{ steps.gitinfo.outputs.sha_short }}.zip ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix
        7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-linux-${{ matrix.compiler.cc }}-${{ matrix.os }}-x86_64-${{ steps.gitinfo.outputs.sha_short }}-debug.zip ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix.dbg

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: vanilla-conquer-${{ steps.set_preset.outputs.preset }}-linux-${{ matrix.compiler.cc }}-${{ matrix.os }}-x86_64
        path: artifact

    - name: Upload development release
      if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
      uses: softprops/action-gh-release@v2
      with:
        name: Development Build
        tag_name: "latest"
        prerelease: true
        files: |
          artifact/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload tagged release
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifact/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
