name: macos

on:
  workflow_dispatch:
    inputs:
      preset:
        description: 'Build preset (e.g., nco-tiberian-dawn)'
        required: false
        default: 'nco-tiberian-dawn'

  # TODO: Builds *only* run for PRs and *only* if you label the PR with 'macos'.
  #       I want to save on action minute usage for now.
  pull_request:
    paths: &change-paths
      - .clang-format
      - CMake**
      - .github/workflows/macos.yml
      - cmake/**
      - common/**
      - redalert/**
      - resources
      - tests/**
      - tiberiandawn/**
      - tools/**

  # push:
  #   branches:
  #     - main
  #   paths: *change-paths

concurrency:
  group: ${{ github.ref }}__macos
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  vanilla-macos:
    if: contains(github.event.pull_request.labels.*.name, 'macos')
    runs-on: macos-14
    strategy:
      matrix:
        preset:
          - "${{ github.event.inputs.preset || 'nco-tiberian-dawn' }}"

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'
        fetch-depth: 0
        ref: "${{ github.event.pull_request.head.sha || github.sha }}"

    - name: Set Git Info
      id: gitinfo
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Setting up Cache-Key
      run: echo "DEP_CACHE_KEY=$(curl 'https://ports.macports.org/api/v1/ports/dylibbundler/?format=json' | grep -ioE '("version":).[^,]*')-$(curl 'https://ports.macports.org/api/v1/ports/libsdl2/?format=json' | grep -ioE '("version":).[^,]*')-$(curl 'https://ports.macports.org/api/v1/ports/openal-soft/?format=json' | grep -ioE '("version":).[^,]*')" >> $GITHUB_ENV

    - name: Printing Cache-Key
      run: echo $DEP_CACHE_KEY

    - name: Restore cache
      id: dep-cache
      uses: actions/cache@v4
      env:
        cache-name: cache-dependencies
      with:
        path: ~/macports
        key: "${{ env.DEP_CACHE_KEY }}"

    - name: Install homebrew deps
      run: |
        brew install imagemagick dylibbundler

    # note: first run (with an empty cache) takes 30-40 mins
    - if: ${{ steps.dep-cache.outputs.cache-hit != 'true' }}
      name: Install macport dependencies
      run: |
        wget -q https://github.com/macports/macports-base/releases/download/v2.10.5/MacPorts-2.10.5-14-Sonoma.pkg
        sudo installer -pkg ./MacPorts-2.10.5-14-Sonoma.pkg -target /
        export PATH="/opt/local/bin:/opt/local/sbin:$PATH"
        sudo port selfupdate -N
        sudo port install libsdl2 +universal -N
        sudo port install openal-soft +universal -N
        mkdir ~/macports
        sudo cp -R /opt/local ~/macports
        sudo chown -R $USER:staff ~/macports

    - if: ${{ steps.dep-cache.outputs.cache-hit == 'true' }}
      name: Restore macport dependencies from cache
      run: |
        sudo cp -R ~/macports/local /opt/local

    - name: Scan for Preset Files in Changes
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          ci:
            - .github/workflows/linux.yml
          nco:
            - .clang-format
            - CMake**
            - cmake/**
            - common/**
            - resources
            - tools/**
          ra:
            - redalert/**
          td:
            - tiberiandawn/**

    - name: Set Preset
      id: set_preset
      run: |
        PRESET=""

        if [ "${{ steps.changes.outputs.nco }}" = "true" ]; then
          echo "Changes to shared files detected - building everything using cmake preset: nco"
          PRESET="nco"
        elif [ "${{ steps.changes.outputs.ra }}" = "true" ] && [ "${{ steps.changes.outputs.td }}" = "true" ]; then
          echo "Red Alert & Tiberian Dawn changes detected - building both using cmake preset: nco"
          PRESET="nco"
        elif [ "${{ steps.changes.outputs.ra }}" = "true" ] ; then
          echo "Only Red Alert changes detected - using cmake preset: nco-red-alert"
          PRESET="nco-red-alert"
        elif [ "${{ steps.changes.outputs.td }}" = "true" ]; then
          echo "Only Tiberian Dawn changes detected - using cmake preset: nco-tiberian-dawn"
          PRESET="nco-tiberian-dawn"
        elif [ "${{ steps.changes.outputs.ci }}" = "true" ]; then
          echo "Workflow yml changes detected - testing workflow changes using cmake preset: nco"
          PRESET="nco"
        else
          echo "WARNING: Unable to match changed files to a preset - defaulting to building everything using cmake preset: nco"
          PRESET="nco"
        fi

        echo "preset=${PRESET}" >> $GITHUB_OUTPUT

    - name: Init vcpkg
      run: ./scripts/bin/vcpkg --version

    - name: Build Vanilla Conquer
      env:
        CMAKE_OSX_ARCHITECTURES: "arm64;x86_64"
        VC_CXX_FLAGS: "-w;-Wwrite-strings;-Werror=write-strings"
      run: |
        export PATH="/opt/local/bin:/opt/local/sbin:$PATH"
        cmake --workflow --preset ${{ steps.set_preset.outputs.preset }}

    - name: Create archives
      run: |
        mkdir artifact
        
        if [ "${{ steps.set_preset.outputs.preset }}" != "nco-tiberian-dawn" ]; then
          dsymutil build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara.app/Contents/MacOS/vanillara -o build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara.dSYM
          strip -Sx build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara.app/Contents/MacOS/vanillara
          dylibbundler --create-dir --bundle-deps --overwrite-files --dest-dir ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara.app/Contents/libs --fix-file build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara.app/Contents/MacOS/vanillara
          7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-macos-clang-universal2-${{ steps.gitinfo.outputs.sha_short }}.zip ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara.app
          7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-macos-clang-universal2-${{ steps.gitinfo.outputs.sha_short }}-debug.zip ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara.dSYM
        fi

        if [ "${{ steps.set_preset.outputs.preset }}" != "nco-red-alert" ]; then
          dsymutil build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd.app/Contents/MacOS/vanillatd -o build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd.dSYM
          strip -Sx build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd.app/Contents/MacOS/vanillatd
          dylibbundler --create-dir --bundle-deps --overwrite-files --dest-dir ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd.app/Contents/libs --fix-file build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd.app/Contents/MacOS/vanillatd
          7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-macos-clang-universal2-${{ steps.gitinfo.outputs.sha_short }}.zip ./resources/data/td/* ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd.app
          7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-macos-clang-universal2-${{ steps.gitinfo.outputs.sha_short }}-debug.zip ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd.dSYM
        fi

    - name: Add internal tools to archive
      run: |
        dsymutil build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix -o build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix.dSYM
        strip -Sx build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix
        7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-macos-clang-universal2-${{ steps.gitinfo.outputs.sha_short }}.zip ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix
        7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-macos-clang-universal2-${{ steps.gitinfo.outputs.sha_short }}-debug.zip ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix.dSYM

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: vanilla-conquer-${{ steps.set_preset.outputs.preset }}-macos-clang-universal2
        path: artifact

    - name: Upload development release
      if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
      uses: softprops/action-gh-release@v2
      with:
        name: Development Build
        tag_name: "latest"
        prerelease: true
        files: |
          artifact/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload tagged release
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifact/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
