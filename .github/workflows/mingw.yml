name: mingw-w64

on:
  workflow_dispatch:
    inputs:
      arch_win:
        description: 'Windows architecture (e.g., Win64)'
        required: false
        default: 'Win64'
      arch_lin:
        description: 'Linux architecture (e.g., x86_64)'
        required: false
        default: 'x86_64'
      preset:
        description: 'Build preset (e.g., nco-tiberian-dawn)'
        required: false
        default: 'nco-tiberian-dawn'

  # TODO: Builds *only* run for PRs and *only* if you label the PR with 'mingw'.
  #       I want to save on action minute usage for now.
  pull_request:
    paths: &change-paths
      - .clang-format
      - CMake**
      - .github/workflows/mingw.yml
      - cmake/**
      - common/**
      - redalert/**
      - resources
      - tests/**
      - tiberiandawn/**
      - tools/**

  # push:
  #   branches:
  #     - main
  #   paths: *change-paths

concurrency:
  group: ${{ github.ref }}__mingw
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  vanilla_win_gcc:
    if: contains(github.event.pull_request.labels.*.name, 'mingw')
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch:
          - win: "${{ github.event.inputs.arch_win || 'Win64' }}"
            lin: "${{ github.event.inputs.arch_lin || 'x86_64' }}"
        preset:
          - "${{ github.event.inputs.preset || 'nco-tiberian-dawn' }}"

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'
        fetch-depth: 0
        ref: "${{ github.sha }}"

    - name: Set Git Info
      id: gitinfo
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Install Dependencies
      run: |
        sudo apt-get update -qq > /dev/null
        sudo apt-get install -qq -y ninja-build mingw-w64 imagemagick > /dev/null
        wget -q https://www.libsdl.org/release/SDL2-devel-2.0.12-mingw.tar.gz
        wget -q --no-check-certificate https://www.openal-soft.org/openal-binaries/openal-soft-1.21.0-bin.zip
        tar -xf SDL2-devel-2.0.12-mingw.tar.gz -C /tmp
        unzip -qq openal-soft-1.21.0-bin.zip -d /tmp
        mv /tmp/openal-soft-1.21.0-bin/bin/${{ matrix.arch.win }}/soft_oal.dll /tmp/openal-soft-1.21.0-bin/bin/${{ matrix.arch.win }}/OpenAL32.dll

    - name: Scan for Preset Files in Changes
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          ci:
            - .github/workflows/linux.yml
          nco:
            - .clang-format
            - CMake**
            - cmake/**
            - common/**
            - resources
            - tools/**
          ra:
            - redalert/**
          td:
            - tiberiandawn/**

    - name: Set Preset
      id: set_preset
      run: |
        PRESET=""

        if [ "${{ steps.changes.outputs.nco }}" = "true" ]; then
          echo "Changes to shared files detected - building everything using cmake preset: nco"
          PRESET="nco"
        elif [ "${{ steps.changes.outputs.ra }}" = "true" ] && [ "${{ steps.changes.outputs.td }}" = "true" ]; then
          echo "Red Alert & Tiberian Dawn changes detected - building both using cmake preset: nco"
          PRESET="nco"
        elif [ "${{ steps.changes.outputs.ra }}" = "true" ] ; then
          echo "Only Red Alert changes detected - using cmake preset: nco-red-alert"
          PRESET="nco-red-alert"
        elif [ "${{ steps.changes.outputs.td }}" = "true" ]; then
          echo "Only Tiberian Dawn changes detected - using cmake preset: nco-tiberian-dawn"
          PRESET="nco-tiberian-dawn"
        elif [ "${{ steps.changes.outputs.ci }}" = "true" ]; then
          echo "Workflow yml changes detected - testing workflow changes using cmake preset: nco"
          PRESET="nco"
        else
          echo "WARNING: Unable to match changed files to a preset - defaulting to building everything using cmake preset: nco"
          PRESET="nco"
        fi

        echo "preset=${PRESET}" >> $GITHUB_OUTPUT

    - name: Init vcpkg
      run: ./scripts/bin/vcpkg --init

    - name: Build Vanilla Conquer
      env:
        CMAKE_FIND_ROOT_PATH: "/tmp/SDL2-2.0.12/${{ matrix.arch.lin }}-w64-mingw32;/tmp/openal-soft-1.21.0-bin"
        CMAKE_TOOLCHAIN_FILE: "cmake/${{ matrix.arch.lin }}-mingw-w64-toolchain.cmake"
        VC_CXX_FLAGS: "-w;-Wwrite-strings;-Werror=write-strings"
      run: |
        cmake --workflow --preset ${{ steps.set_preset.outputs.preset }}

    - name: Create archives
      run: |
        mkdir artifact

        7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-win-gcc-${{ matrix.arch.lin }}-${{ steps.gitinfo.outputs.sha_short }}.zip /tmp/SDL2-2.0.12/${{ matrix.arch.lin }}-w64-mingw32/bin/SDL2.dll /tmp/openal-soft-1.21.0-bin/bin/${{ matrix.arch.win }}/OpenAL32.dll

        if [ "${{ steps.set_preset.outputs.preset }}" != "nco-tiberian-dawn" ]; then
          cp ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara.exe ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara.dbg
          ${{ matrix.arch.lin }}-w64-mingw32-strip --strip-all ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara.exe
          ${{ matrix.arch.lin }}-w64-mingw32-objcopy --add-gnu-debuglink=./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara.dbg ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara.exe
          7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-win-gcc-${{ matrix.arch.lin }}-${{ steps.gitinfo.outputs.sha_short }}.zip ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara.exe
          7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-win-gcc-${{ matrix.arch.lin }}-${{ steps.gitinfo.outputs.sha_short }}-debug.zip ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillara.dbg
        fi

        if [ "${{ steps.set_preset.outputs.preset }}" != "nco-red-alert" ]; then
          cp ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd.exe ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd.dbg
          ${{ matrix.arch.lin }}-w64-mingw32-strip --strip-all ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd.exe
          ${{ matrix.arch.lin }}-w64-mingw32-objcopy --add-gnu-debuglink=./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd.dbg ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd.exe
          7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-win-gcc-${{ matrix.arch.lin }}-${{ steps.gitinfo.outputs.sha_short }}.zip ./resources/data/td/* ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd.exe
          7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-win-gcc-${{ matrix.arch.lin }}-${{ steps.gitinfo.outputs.sha_short }}-debug.zip ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillatd.dbg
        fi

    - name: Add internal tools to archive
      run: |
        cp ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix.exe ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix.dbg
        ${{ matrix.arch.lin }}-w64-mingw32-strip --strip-all ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix.exe
        ${{ matrix.arch.lin }}-w64-mingw32-objcopy --add-gnu-debuglink=./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix.dbg ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix.exe
        7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-win-gcc-${{ matrix.arch.lin }}-${{ steps.gitinfo.outputs.sha_short }}.zip ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix.exe
        7z a artifact/vanilla-conquer-${{ steps.set_preset.outputs.preset }}-win-gcc-${{ matrix.arch.lin }}-${{ steps.gitinfo.outputs.sha_short }}-debug.zip ./build/${{ steps.set_preset.outputs.preset }}/RelWithDebInfo/vanillamix.dbg

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: vanilla-conquer-${{ steps.set_preset.outputs.preset }}-win-gcc-${{ matrix.arch.lin }}
        path: artifact

    - name: Upload development release
      if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
      uses: softprops/action-gh-release@v2
      with:
        name: Development Build
        tag_name: "latest"
        prerelease: true
        files: |
          artifact/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload tagged release
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifact/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
