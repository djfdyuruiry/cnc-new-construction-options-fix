name: windows

on:
  workflow_dispatch:
    inputs:
      arch_win:
        description: 'Windows architecture (e.g., Win64)'
        required: false
        default: 'Win64'
      arch_lin:
        description: 'Linux architecture (e.g., x86_64)'
        required: false
        default: 'x86_64'

  pull_request:
    paths: &change-paths
      - .clang-format
      - CMake**
      - .github/workflows/windows.yml
      - cmake/**
      - common/**
      - redalert/**
      - resources
      - tests/**
      - tiberiandawn/**
      - tools/**

  push:
    branches:
      - main
    paths: *change-paths

concurrency:
  group: ${{ github.ref }}__windows
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  resolve_win_cmake_preset:
    runs-on: windows-2022
    outputs:
      preset: ${{ steps.set_preset.outputs.preset }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'
        fetch-depth: 0
        ref: "${{ github.event.pull_request.head.sha || github.sha }}"

    - name: Scan for Preset Files in Changes
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          ci:
            - .github/workflows/linux.yml
          nco:
            - .clang-format
            - CMake**
            - cmake/**
            - common/**
            - resources
            - tools/**
          ra:
            - redalert/**
          td:
            - tiberiandawn/**

    - name: Set Preset
      id: set_preset
      shell: bash
      run: |
        PRESET=""

        if [ "${{ steps.changes.outputs.nco }}" = "true" ]; then
          echo "Changes to shared files detected - building everything using cmake preset: nco"
          PRESET="nco"
        elif [ "${{ steps.changes.outputs.ra }}" = "true" ] && [ "${{ steps.changes.outputs.td }}" = "true" ]; then
          echo "Red Alert & Tiberian Dawn changes detected - building both using cmake preset: nco"
          PRESET="nco"
        elif [ "${{ steps.changes.outputs.ra }}" = "true" ] ; then
          echo "Only Red Alert changes detected - using cmake preset: nco-red-alert"
          PRESET="nco-red-alert"
        elif [ "${{ steps.changes.outputs.td }}" = "true" ]; then
          echo "Only Tiberian Dawn changes detected - using cmake preset: nco-tiberian-dawn"
          PRESET="nco-tiberian-dawn"
        elif [ "${{ steps.changes.outputs.ci }}" = "true" ]; then
          echo "Workflow yml changes detected - testing workflow changes using cmake preset: nco"
          PRESET="nco"
        else
          echo "WARNING: Unable to match changed files to a preset - defaulting to building everything using cmake preset: nco"
          PRESET="nco"
        fi

        echo "preset=${PRESET}" >> $GITHUB_OUTPUT

  vanilla_win_msvc:
    needs:
      - resolve_win_cmake_preset
    runs-on: windows-2022
    strategy:
      matrix:
        arch:
          - win: "${{ github.event.inputs.arch_win || 'Win64' }}"
            lin: "${{ github.event.inputs.arch_lin || 'x86_64' }}"
            cmd: x64

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'
        fetch-depth: 0
        ref: "${{ github.event.pull_request.head.sha || github.sha }}"

    - uses: ilammy/msvc-dev-cmd@v1.13.0
      with:
        arch: ${{ matrix.arch.cmd }}

    - name: Set Git Info
      id: gitinfo
      shell: pwsh
      run: |
        $gitoutput = git rev-parse --short HEAD
        echo "sha_short=${gitoutput}" >> $env:GITHUB_OUTPUT

    - name: Install Dependencies
      id: deps
      run: |
        Invoke-WebRequest -Uri https://www.libsdl.org/release/SDL2-devel-2.0.12-VC.zip -OutFile SDL2-devel.zip
        Invoke-WebRequest -Uri https://github.com/ninja-build/ninja/releases/download/v1.10.1/ninja-win.zip -OutFile $Env:TEMP\ninja-win.zip
        Invoke-WebRequest -SkipCertificateCheck -Uri https://www.openal-soft.org/openal-binaries/openal-soft-1.21.0-bin.zip -OutFile openal-soft-1.21.0-bin.zip

        Expand-Archive SDL2-devel.zip -DestinationPath .
        Expand-Archive $Env:TEMP\ninja-win.zip -DestinationPath $Env:TEMP\ninja
        Expand-Archive openal-soft-1.21.0-bin.zip -DestinationPath .

        echo "$Env:TEMP\ninja" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        ninja --version

        Rename-Item openal-soft-1.21.0-bin\bin\${{ matrix.arch.win }}\soft_oal.dll OpenAL32.dll
        echo "magickpath=$(Split-Path -Path $(Get-Command magick).Path -Parent)" >> $env:GITHUB_OUTPUT

    - name: Init vcpkg
      shell: bash
      run: IS_WINDOWS=true ./scripts/bin/vcpkg --version

    - name: Build Vanilla Conquer
      env:
        CMAKE_FIND_ROOT_PATH: "SDL2-2.0.12;openal-soft-1.21.0-bin;${{ steps.deps.outputs.magickpath }}"
        VC_CXX_FLAGS: "/Zc:strictStrings;-wd4244;-wd4018;-wd4291;-wd4101;-wd4267;-wd4200"
      run: |
        New-Item -Path "build/${{ needs.resolve_win_cmake_preset.outputs.preset }}/RelWithDebInfo" -ItemType Directory
        Copy-Item -Path "SDL2-2.0.12\lib\${{ matrix.arch.cmd }}\SDL2.dll" -Destination build/${{ needs.resolve_win_cmake_preset.outputs.preset }}/RelWithDebInfo
        cmake --workflow --preset ${{ needs.resolve_win_cmake_preset.outputs.preset }}

    - name: Create archives
      shell: bash
      run: |
        mkdir artifact

        7z a artifact/vanilla-conquer-${{ needs.resolve_win_cmake_preset.outputs.preset }}-win-msvc-${{ matrix.arch.lin }}-${{ steps.gitinfo.outputs.sha_short }}.zip ./SDL2-2.0.12/lib/${{ matrix.arch.cmd }}/SDL2.dll ./openal-soft-1.21.0-bin/bin/${{ matrix.arch.win }}/OpenAL32.dll

        if [ "${{ needs.resolve_win_cmake_preset.outputs.preset }}" != "nco-tiberian-dawn" ]; then
          7z a artifact/vanilla-conquer-${{ needs.resolve_win_cmake_preset.outputs.preset }}-win-msvc-${{ matrix.arch.lin }}-${{ steps.gitinfo.outputs.sha_short }}.zip ./build/${{ needs.resolve_win_cmake_preset.outputs.preset }}/RelWithDebInfo/vanillara.exe
          7z a artifact/vanilla-conquer-${{ needs.resolve_win_cmake_preset.outputs.preset }}-win-msvc-${{ matrix.arch.lin }}-${{ steps.gitinfo.outputs.sha_short }}-debug.zip ./build/${{ needs.resolve_win_cmake_preset.outputs.preset }}/RelWithDebInfo/vanillara.pdb
        fi

        if [ "${{ needs.resolve_win_cmake_preset.outputs.preset }}" != "nco-red-alert" ]; then
          7z a artifact/vanilla-conquer-${{ needs.resolve_win_cmake_preset.outputs.preset }}-win-msvc-${{ matrix.arch.lin }}-${{ steps.gitinfo.outputs.sha_short }}.zip  ./resources/data/td/* ./build/${{ needs.resolve_win_cmake_preset.outputs.preset }}/RelWithDebInfo/vanillatd.exe
          7z a artifact/vanilla-conquer-${{ needs.resolve_win_cmake_preset.outputs.preset }}-win-msvc-${{ matrix.arch.lin }}-${{ steps.gitinfo.outputs.sha_short }}-debug.zip ./build/${{ needs.resolve_win_cmake_preset.outputs.preset }}/RelWithDebInfo/vanillatd.pdb
        fi

    - name: Add internal tools to archive
      run: |
        7z a artifact/vanilla-conquer-${{ needs.resolve_win_cmake_preset.outputs.preset }}-win-msvc-${{ matrix.arch.lin }}-${{ steps.gitinfo.outputs.sha_short }}.zip ./build/${{ needs.resolve_win_cmake_preset.outputs.preset }}/RelWithDebInfo/vanillamix.exe
        7z a artifact/vanilla-conquer-${{ needs.resolve_win_cmake_preset.outputs.preset }}-win-msvc-${{ matrix.arch.lin }}-${{ steps.gitinfo.outputs.sha_short }}-debug.zip ./build/${{ needs.resolve_win_cmake_preset.outputs.preset }}/RelWithDebInfo/vanillamix.pdb

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: vanilla-conquer-${{ needs.resolve_win_cmake_preset.outputs.preset }}-win-msvc-${{ matrix.arch.lin }}
        path: artifact

    - name: Upload development release
      if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
      uses: softprops/action-gh-release@v2
      with:
        name: Development Build
        tag_name: "latest"
        prerelease: true
        files: |
          artifact/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload tagged release
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifact/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # TODO: Remaster compatibility
  # remaster_msvc:
  #   needs:
  #     - resolve_win_cmake_preset
  #   runs-on: windows-2022
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       submodules: 'true'
  #       fetch-depth: 0
  #       ref: "${{ github.event.pull_request.head.sha || github.sha }}"

  #   - uses: ilammy/msvc-dev-cmd@v1.13.0
  #     with:
  #       arch: x86

  #   - name: Set Git Info
  #     id: gitinfo
  #     shell: pwsh
  #     run: |
  #       $gitoutput = git rev-parse --short HEAD
  #       echo "sha_short=${gitoutput}" >> $env:GITHUB_OUTPUT

  #   - name: Install Dependencies
  #     run: |
  #       Invoke-WebRequest -Uri https://github.com/ninja-build/ninja/releases/download/v1.10.1/ninja-win.zip -OutFile $Env:TEMP\ninja-win.zip
  #       Expand-Archive $Env:TEMP\ninja-win.zip -DestinationPath $Env:TEMP\ninja

  #       echo "$Env:TEMP\ninja" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
  #       ninja --version

  #   - name: Init vcpkg
  #     shell: bash
  #     run: IS_WINDOWS=true ./scripts/bin/vcpkg --version

  #   - name: Build Vanilla Conquer
  #     env:
  #       VC_CXX_FLAGS: "/Zc:strictStrings;-wd4244;-wd4018;-wd4291;-wd4101;-wd4267;-wd4200"
  #     run: |
  #       cmake --workflow --preset ${{ needs.resolve_win_cmake_preset.outputs.preset }}-remaster

  #   - name: Create archives
  #     shell: bash
  #     run: |
  #       mkdir artifact

  #       if [ "${{ needs.resolve_win_cmake_preset.outputs.preset }}" != "nco-tiberian-dawn" ]; then
  #         7z a artifact/vanilla-conquer-remasterdll-msvc-${{ steps.gitinfo.outputs.sha_short }}.zip ./build/${{ needs.resolve_win_cmake_preset.outputs.preset }}-remaster/RelWithDebInfo/RedAlert.dll
  #         7z a artifact/vanilla-conquer-remasterdll-msvc-${{ steps.gitinfo.outputs.sha_short }}-debug.zip ./build/${{ needs.resolve_win_cmake_preset.outputs.preset }}-remaster/RelWithDebInfo/RedAlert.pdb
  #         7z a artifact/vanilla-ra-remaster-mod-msvc-${{ steps.gitinfo.outputs.sha_short }}.zip ./build/${{ needs.resolve_win_cmake_preset.outputs.preset }}-remaster/Vanilla_RA
  #       fi

  #       if [ "${{ needs.resolve_win_cmake_preset.outputs.preset }}" != "nco-red-alert" ]; then
  #         7z a artifact/vanilla-conquer-remasterdll-msvc-${{ steps.gitinfo.outputs.sha_short }}.zip ./build/${{ needs.resolve_win_cmake_preset.outputs.preset }}-remaster/RelWithDebInfo/TiberianDawn.dll
  #         7z a artifact/vanilla-conquer-remasterdll-msvc-${{ steps.gitinfo.outputs.sha_short }}-debug.zip ./build/${{ needs.resolve_win_cmake_preset.outputs.preset }}-remaster/RelWithDebInfo/TiberianDawn.pdb
  #         7z a artifact/vanilla-td-remaster-mod-msvc-${{ steps.gitinfo.outputs.sha_short }}.zip ./build/${{ needs.resolve_win_cmake_preset.outputs.preset }}-remaster/Vanilla_TD
  #       fi

  #   - name: Upload artifact
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: vanilla-conquer-remaster-msvc
  #       path: artifact

  #   - name: Upload development release
  #     if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
  #     uses: softprops/action-gh-release@v2
  #     with:
  #       name: Development Build
  #       tag_name: "latest"
  #       prerelease: true
  #       files: |
  #         artifact/*
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #   - name: Upload tagged release
  #     if: ${{ startsWith(github.ref, 'refs/tags/') }}
  #     uses: softprops/action-gh-release@v2
  #     with:
  #       files: |
  #         artifact/*
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
