#include "common/logger.h"
#include "common/rulesections.h"

#include "function.h"
#include "ccini.h"

/**
 * This method was generated by CMake file `cmake/TiberianDawnRules.cmake` using
 * rule JSON files:
@RULE_JSON_SOURCES_COMMENTS@ */
bool RulesClass::Process_Sections(CCINIClass& ini)
{
    // generated code START@RULE_PROCESS_CODE@

    // generated code END

    return true;
}

/**
 * This method was generated by CMake file `cmake/TiberianDawnRules.cmake` using
 * rule JSON files:
@RULE_JSON_SOURCES_COMMENTS@ */
bool RulesClass::Export_Sections(CCINIClass& ini)
{
    // TODO: Provide way to write out comments OR move each block to seperate sections
    // generated code START@RULE_EXPORT_CODE@

    // generated code END

    return true;
}

void RulesClass::Apply_Special_Properties() {
    // map
    Special.IsTGrowth = Sections[GAME_SECTION].Get<bool>(TIBERIUM_GROWS_RULE);
    Special.IsTSpread = Sections[GAME_SECTION].Get<bool>(TIBERIUM_SPREADS_RULE);
    Special.IsTFast = !Sections[GAME_SECTION].Get<bool>(SLOW_TIBERIUM_GROWTH_AND_SPREAD_RULE);

    // misc
    Special.IsSmartDefense = Sections[GAME_SECTION].Get<bool>(SMART_DEFENCE_RULE);
    Special.IsTreeTarget = Sections[GAME_SECTION].Get<bool>(TARGET_TREES_RULE);
    Special.IsMCVDeploy = Sections[GAME_SECTION].Get<bool>(MCV_REDEPLOYABLE_RULE);
    Special.IsVisceroids = Sections[GAME_SECTION].Get<bool>(SPAWN_VISCEROIDS_RULE);
    Special.IsThreePoint = Sections[GAME_SECTION].Get<bool>(VEHICLES_DO_THREE_POINT_TURNS_RULE);
    Special.IsRoad = Sections[GAME_SECTION].Get<bool>(SHOW_BIBS_ON_BUILDINGS_RULE);
    Special.IsNamed = Sections[GAME_SECTION].Get<bool>(SHOW_CIVILIAN_BUILDING_NAMES_RULE);
    Special.IsSeparate = Sections[GAME_SECTION].Get<bool>(HELIPADS_AND_AIRCRAFT_BOUGHT_SEPERATELY_RULE);

    // cheats
    Special.IsInert = Sections[GAME_SECTION].Get<bool>(UNITS_ARE_INDESTRUCTIBLE_RULE);
    Special.IsScatter = Sections[GAME_SECTION].Get<bool>(INFANTRY_AUTO_SCATTERS_RULE);
    Special.IsDefenderAdvantage = !Sections[GAME_SECTION].Get<bool>(GIVE_ATTACKERS_AN_ADVANTAGE_RULE);
    Special.IsSpeedBuild = Sections[GAME_SECTION].Get<bool>(SPEEDY_SUPERWEAPONS_RULE);

    // TODO: Make rule and restore audio if missing
    // Special.IsJuvenile = false;

    // TODO: Make rules for the below
    // Special.IsVisibleTarget = false;
    // Special.IsShowPath = false;
    // Special.HealthBarDisplayMode = HB_SELECTED;
    // Special.ResourceBarDisplayMode = RB_SELECTED;
    // Special.ModernBalance = false;
}

void RulesClass::Apply_Static_And_Global_Values() {
    Apply_Special_Properties();

    FactoryClass::STEP_COUNT = Sections[GAME_SECTION].Get<int>(TOTAL_PRODUCTION_STEPS_RULE);
}
