#include "common/logger.h"
#include "common/rulesections.h"

#include "function.h"
#include "ccini.h"

/**
 * This method was generated by CMake file `cmake/TiberianDawnRules.cmake` using
 * rule JSON files:
@RULE_JSON_SOURCES_COMMENTS@ */
bool RulesClass::Process_Sections(CCINIClass& ini)
{
    // generated code START@RULE_PROCESS_CODE@

    // generated code END

    return true;
}

/**
 * This method was generated by CMake file `cmake/TiberianDawnRules.cmake` using
 * rule JSON files:
@RULE_JSON_SOURCES_COMMENTS@ */
bool RulesClass::Export_Sections(CCINIClass& ini)
{
    // TODO: Provide way to write out comments OR move each block to seperate sections
    // generated code START@RULE_EXPORT_CODE@

    // generated code END

    return true;
}

void RulesClass::Apply_Special_Properties() {
    // map
    Special.IsTGrowth = Get_Bool_Rule(GAME_MAP_SECTION, TIBERIUM_GROWS_RULE);
    Special.IsTSpread = Get_Bool_Rule(GAME_MAP_SECTION, TIBERIUM_SPREADS_RULE);
    Special.IsTFast = !Get_Bool_Rule(GAME_MAP_SECTION, SLOW_TIBERIUM_GROWTH_AND_SPREAD_RULE);

    // misc
    Special.IsSmartDefense = Get_Bool_Rule(GAME_MISC_SECTION, SMART_DEFENCE_RULE);
    Special.IsTreeTarget = Get_Bool_Rule(GAME_MISC_SECTION, TARGET_TREES_RULE);
    Special.IsMCVDeploy = Get_Bool_Rule(GAME_MISC_SECTION, MCV_REDEPLOYABLE_RULE);
    Special.IsVisceroids = Get_Bool_Rule(GAME_MISC_SECTION, SPAWN_VISCEROIDS_RULE);
    Special.IsThreePoint = Get_Bool_Rule(GAME_MISC_SECTION, VEHICLES_DO_THREE_POINT_TURNS_RULE);
    Special.IsRoad = Get_Bool_Rule(GAME_MISC_SECTION, SHOW_BIBS_ON_BUILDINGS_RULE);
    Special.IsNamed = Get_Bool_Rule(GAME_MISC_SECTION, SHOW_CIVILIAN_BUILDING_NAMES_RULE);
    Special.IsSeparate = Get_Bool_Rule(GAME_MISC_SECTION, HELIPADS_AND_AIRCRAFT_BOUGHT_SEPERATELY_RULE);

    // cheats
    Special.IsInert = Get_Bool_Rule(GAME_CHEATS_SECTION, UNITS_ARE_INDESTRUCTIBLE_RULE);
    Special.IsScatter = Get_Bool_Rule(GAME_CHEATS_SECTION, INFANTRY_AUTO_SCATTERS_RULE);
    Special.IsDefenderAdvantage = !Get_Bool_Rule(GAME_CHEATS_SECTION, GIVE_ATTACKERS_AN_ADVANTAGE_RULE);
    Special.IsSpeedBuild = Get_Bool_Rule(GAME_CHEATS_SECTION, SPEEDY_SUPERWEAPONS_RULE);

    // TODO: Make rule and restore audio if missing
    // Special.IsJuvenile = false;

    // TODO: Make rules for the below
    // Special.IsVisibleTarget = false;
    // Special.IsShowPath = false;
    // Special.HealthBarDisplayMode = HB_SELECTED;
    // Special.ResourceBarDisplayMode = RB_SELECTED;
    // Special.ModernBalance = false;
}

void RulesClass::Apply_Static_And_Global_Values() {
    Apply_Special_Properties();

    FactoryClass::STEP_COUNT = Get_Int_Rule(GAME_FACTORIES_SECTION, TOTAL_PRODUCTION_STEPS_RULE);
}
